// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.toWei(1, "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
      

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes,{from: accounts[1]})

          // Watch the emitted event Harvested()
          var event = supplyChain.Harvested()
          await event.watch((err, res) => {
              eventEmitted = true
          })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        // console.log(resultBufferOne[2],resultBufferOne[3])
        // console.log("event 66",eventEmitted , "number",Number(resultBufferTwo[5]))
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(Number(resultBufferTwo[5]), itemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')  
        itemState+=1;      
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Mark an item as Processed by calling function processtItem()
        await supplyChain.processItem(upc,{from: accounts[1]});

         // Watch the emitted event Processed()
         var event = supplyChain.Processed();
         await event.watch((err, res) =>{
             eventEmitted = true;
         })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(Number(resultBufferTwo[5]), itemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
        itemState+=1;   
    })    

    // // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Mark an item as Processed by calling function processtItem()
        await supplyChain.packItem(upc,{from: accounts[1]});

        // Watch the emitted event Packed()
        var event = supplyChain.Packed();
        await event.watch((err, res) =>{
            eventEmitted = true;
        })
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
        itemState+=1;  
        
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
 
        var eventEmitted = false;
        
        
       //  let price = web3.utils.toWei(".05", "ether");
        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc,productPrice,{from: accounts[1]});

        // Watch the emitted event ForSale()
        var event = supplyChain.ForSale();
        await event.watch((err, res) =>{
            eventEmitted = true;
        })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
        itemState+=1;  
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        
        let balance = web3.toWei(3, "ether");
        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc,{from:accounts[2], value : balance});

        // Watch the emitted event Sold()
        var event = supplyChain.Sold();
        await event.watch((err, res) =>{
            eventEmitted = true;
        })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
        itemState+=1;  
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Mark an item as Sold by calling function shipItem()
        await supplyChain.shipItem(upc,{from : accounts[2]});

        // Watch the emitted event Shipped()
        var event = supplyChain.Shipped();
        await event.watch((err, res) =>{
            eventEmitted = true;
        })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
        itemState+=1;  
              
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Mark an item as Sold by calling function receiveItem()
        await supplyChain.receiveItem(upc,{from : accounts[3]});

           // Watch the emitted event Received()
           var event = supplyChain.Received();
           await event.watch((err, res) =>{
               eventEmitted = true;
           })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
        itemState+=1;  
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Mark an item as Sold by calling function purchaseItem()
        await supplyChain.purchaseItem(upc, {from : accounts[4]});

         // Watch the emitted event Purchased()
         var event = supplyChain.Purchased();
         await event.watch((err, res) =>{
             eventEmitted = true;
         })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted') 
        itemState+=1;  
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)

        // Verify the result set
        assert.equal(Number(resultBufferOne[0]), sku, 'Error: Invalid item SKU')
        assert.equal(Number(resultBufferOne[1]), upc, 'Error: Invalid item UPC')
        //At the end consumer will be the owner after going through all 8 stages
        assert.equal(resultBufferOne[2], accounts[4], 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude') 
        
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(Number(resultBufferTwo[0]),sku,'Error: Inalid sku id')
        assert.equal(Number(resultBufferTwo[1]),upc,'Error: Inalid upc id')
        assert.equal(Number(resultBufferTwo[2]),productID, 'Error: Inalid productid')
        assert.equal(resultBufferTwo[3],productNotes,'Error: Inalid product notes')
        assert.equal(Number(resultBufferTwo[4]),productPrice,'Error: Inalid product price')
        assert.equal(Number(resultBufferTwo[5]), itemState-1  , 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6],distributorID,'Error: Inalid distributorid')
        assert.equal(resultBufferTwo[7],retailerID,'Error: Inalid retailerid')
        assert.equal(resultBufferTwo[8],consumerID,'Error: Inalid consumer id')
    })

});

